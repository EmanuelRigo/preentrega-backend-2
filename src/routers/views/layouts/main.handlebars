<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Electrónica</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- O si prefieres usar el CDN directo -->
    <!-- <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"> -->
</head>

<body class="bg-gray-800 min-h-screen">
    <nav class="bg-blue-700 text-white p-4 shadow-lg">
        <div class="max-w-7xl mx-auto flex flex-wrap justify-between items-center gap-4">
            <h1 class="text-3xl font-bold">Electrónica</h1>

            <div id="authButtons" class="flex items-center gap-4">
                <!-- Aquí se mostrarán los botones de login/register o logout -->
            </div>

            <div class="flex flex-wrap items-center gap-4">
                <!-- Enlaces principales -->
                <div class="flex space-x-2">
                    <a href="/products" class="px-4 py-2 hover:bg-blue-600 rounded-lg transition-colors">Productos</a>
                    <a href="/realTimeProducts"
                        class="px-4 py-2 hover:bg-blue-600 rounded-lg transition-colors">RealTime</a>
                    <a href="/carts" class="px-4 py-2 hover:bg-blue-600 rounded-lg transition-colors">Carritos</a>
                    <a href="/api/products" class="px-4 py-2 hover:bg-blue-600 rounded-lg transition-colors">API</a>
                </div>

                <!-- Filtros -->
                <div class="flex flex-wrap items-center gap-3">
                    <select id="query"
                        class="px-4 py-2 text-gray-300 bg-gray-700 rounded-lg border border-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                        onchange="filterProducts()">
                        <option value="">Categoría</option>
                        <option value="smartphones">Smartphones</option>
                        <option value="laptops">Laptops</option>
                        <option value="tablets">Tablets</option>
                        <option value="accesorios">Accesorios</option>
                        <option value="">Quitar Filtro</option>
                    </select>

                    <select id="price"
                        class="px-4 py-2 text-gray-300 bg-gray-700 rounded-lg border border-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                        onchange="filterProducts()">
                        <option value="">Ordenar</option>
                        <option value="asc">Precio ↑</option>
                        <option value="desc">Precio ↓</option>
                        <option value="">Quitar Filtro</option>
                    </select>

                    <select id="limit"
                        class="px-4 py-2 text-gray-300 bg-gray-700 rounded-lg border border-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                        onchange="filterProducts()">
                        <option value="">Límite</option>
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                        <option value="">Quitar Filtro</option>
                    </select>

                    <!-- Botones de disponibilidad -->
                    <div class="flex gap-2">
                        <button onclick="filterByAvailability(true)"
                            class="px-4 py-2 bg-blue-500 hover:bg-blue-600 rounded-lg transition-colors">
                            Disponibles
                        </button>
                        <button onclick="filterByAvailability(false)"
                            class="px-4 py-2 bg-red-500 hover:bg-red-600 rounded-lg transition-colors">
                            No Disponibles
                        </button>
                    </div>

                    <!-- Botón crear carrito -->
                    <button onclick="createCart()"
                        class="px-4 py-2 bg-emerald-500 hover:bg-emerald-600 rounded-lg transition-colors flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path
                                d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z" />
                        </svg>
                        Crear Carrito
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <main class="max-w-7xl mx-auto mt-8 px-4">
        {{{body}}}
    </main>

    <script>
        async function verifyOnline() {
            try {
                const token = localStorage.getItem("token");
                const authButtons = document.getElementById('authButtons');

                if (!token) {
                    authButtons.innerHTML = `
                        <a href="/login" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors">Login</a>
                        <a href="/register" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors">Register</a>
                    `;
                    return;
                }

                const url = "/api/sessions/online";
                const opts = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${token}`
                    },
                };

                const response = await fetch(url, opts);
                const result = await response.json();

                if (result.online) {
                    authButtons.innerHTML = `
                        <button id="signout" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors">
                            Sign Out
                        </button>
                    `;

                    document.querySelector("#signout").addEventListener("click", async () => {
                        try {
                            const signoutUrl = "/api/sessions/signout";
                            const signoutOpts = {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "Authorization": `Bearer ${token}`
                                },
                            };

                            const signoutResponse = await fetch(signoutUrl, signoutOpts);

                            if (signoutResponse.ok) {
                                localStorage.removeItem("token");
                                window.location.replace('/');
                            }
                        } catch (error) {
                            console.error("Error en el proceso de cierre de sesión:", error);
                        }
                    });
                }
            } catch (error) {
                console.error("Error en la verificación de sesión:", error);
            }
        }

        verifyOnline();
    </script>

    <script>
        // Función para filtrar productos
        async function filterProducts() {
            try {
                const query = document.getElementById("query").value;
                const sort = document.getElementById("price").value;
                const limit = document.getElementById("limit").value;

                let url = "/products?";
                if (query) url += `query=${query}&`;
                if (sort) url += `sort=${sort}&`;
                if (limit) url += `limit=${limit}`;

                window.location.href = url;
            } catch (error) {
                console.error("Error al filtrar productos:", error);
            }
        }

        // Función para filtrar por disponibilidad
        async function filterByAvailability(available) {
            try {
                const url = `/products?available=${available}`;
                window.location.href = url;
            } catch (error) {
                console.error("Error al filtrar por disponibilidad:", error);
            }
        }

        // Función para crear carrito
        async function createCart() {
            try {
                const token = localStorage.getItem("token");
                if (!token) {
                    alert("Debes iniciar sesión para crear un carrito");
                    return;
                }

                const url = "/api/carts";
                const opts = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${token}`
                    }
                };

                const response = await fetch(url, opts);
                const result = await response.json();

                if (response.ok) {
                    alert("Carrito creado exitosamente");
                    window.location.href = `/carts/${result.cart._id}`;
                } else {
                    alert("Error al crear el carrito");
                }
            } catch (error) {
                console.error("Error al crear carrito:", error);
                alert("Error al crear el carrito");
            }
        }

        // Mantener seleccionados los filtros según la URL
        function setFiltersFromUrl() {
            const params = new URLSearchParams(window.location.search);

            const query = params.get("query");
            if (query) document.getElementById("query").value = query;

            const sort = params.get("sort");
            if (sort) document.getElementById("price").value = sort;

            const limit = params.get("limit");
            if (limit) document.getElementById("limit").value = limit;
        }

        // Ejecutar al cargar la página
        document.addEventListener("DOMContentLoaded", () => {
            setFiltersFromUrl();
            verifyOnline();
        });
    </script>
</body>

</html>